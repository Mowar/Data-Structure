目的要求：
    1．掌握顺序存储结构的特点。
    2．掌握顺序存储结构的常见算法。
	3．掌握单链表的存储特点及其实现。
    4．掌握单链表的插入、删除算法及其应用算法的程序实现

实验内容：
编写一个完整的程序，实现顺序表的生成、插入、删除、输出等基本运算。
（1）	建立一个顺序表，含有n个数据元素。
（2）	输出顺序表。
（3）	在顺序表中删除值为x的结点或者删除给定位置i的结点。
（4）	实现把该表中所有奇数排在偶数之前，即表的前面为奇数，后面为偶数。
（5）	输入整型元素序列，利用有序表插入算法建立一个有序表。
（6）	*利用算法5建立两个非递减有序表A和B，并把它们合并成一个非递减有序表C。
（7）	在主函数中设计一个简单的菜单，分别测试上述算法。
（8）	*综合训练：
    利用顺序表实现一个班级学生信息管理（数据录入、插入、删除、排序、查找等）。

实验说明：
1．请构建多文件程序，算法1至算法6对应的函数原型声明存放在头文件SqList.h中，对应
  的函数实现存放在源文件SqList.c中；main()函数存放在另一个源文件中，该文件包含头文件SqList.h即可。

实验内容：
    编写一个完整的程序，实现单链表的生成、插入、删除、输出等基本操作。
（1）	随机产生或键盘输入一组元素，建立一个带头结点的单向链表（无序）。
（2）	计算单链表的长度，遍历单链表。
（3）	把单链表中的元素逆置（不允许申请新的结点空间）。
（4）	在单链表中删除所有值为偶数的元素结点。
（5）	编写在非递减有序单链表中插入一个元素使链表元素仍有序的函数，并利用该函数建立一个非递减有序单链表。
（6）	* 利用算法5建立两个非递减有序单链表，然后合并成一个非递增有序链表。
（7）	* 利用算法5建立两个非递减有序单链表，然后合并成一个非递减有序链表。
（8）	* 利用算法1建立的链表，实现将其分解成两个链表，其中一个全部为奇数，另一个全部为偶数（尽量利用已知的存储空间）。
（9）	* 采用单链表实现一元多项式的存储并实现两个多项式相加并输出结果。
（10）	在主函数中设计一个简单的菜单，分别调试上述算法。
（11）	* 综合训练：
				1）利用链表实现一个班级学生信息管理（数据录入、插入、删除、排序、查找等，并能够实现将数据存储到文件中）
				2）约瑟夫环问题：设有n个人围坐在圆桌周围，从某个位置开始编号为1，2，3，…，n，坐在编号为1的位置上的人从1开始报数，数到m的
		人便出列；下一个（第m+1个）人又从1开始报数，数到m的人便是第二个出列的人；如此重复下去，直到最后一个人出列为止，得到一个出
		列的编号顺序。例如，当n=8，m=4时，若从第一个位置数起，则出列的次序为4，8，5，2，1，3，7，6。试编写程序确定出列的顺序。要
		求用不带头结点的单向循环链表作为存储结构模拟此过程，按照出列顺序打印出个人编号。